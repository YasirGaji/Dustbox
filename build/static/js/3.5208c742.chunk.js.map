{"version":3,"sources":["components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/quotes/NoQuotesFound.js","pages/AllQuotes.js"],"names":["module","exports","QuoteItem","props","className","classes","item","text","author","to","id","QuoteList","quotes","ascending","history","useHistory","location","useLocation","isSortingAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","sorting","onClick","push","pathname","list","map","quote","NoQuotesFound","noquotes","AllQuotes","useHttp","getAllQuotes","sendRequest","status","loadedQuotes","data","error","useEffect","LoadingSpinner","length"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,mBCA3DD,EAAOC,QAAU,CAAC,SAAW,kC,wFCkBdC,EAhBG,SAACC,GACjB,OACE,qBAAIC,UAAWC,IAAQC,KAAvB,UACE,mCACE,qCACE,4BAAIH,EAAMI,SAEZ,qCAAaJ,EAAMK,YAErB,cAAC,IAAD,CAAMJ,UAAU,MAAMK,GAAE,kBAAaN,EAAMO,IAA3C,iC,iBC4CSC,EAzCG,SAACR,GACjB,IAXkBS,EAAQC,EAWpBC,EAAUC,cACVC,EAAWC,cAIXC,EAAiD,QAFnC,IAAIC,gBAAgBH,EAASI,QAEVC,IAAI,QAErCC,GAlBYV,EAkBcT,EAAMS,OAlBZC,EAkBoBK,EAjBvCN,EAAOW,MAAK,SAACC,EAAQC,GAC1B,OAAIZ,EACKW,EAAOd,GAAKe,EAAOf,GAAK,GAAK,EAE7Bc,EAAOd,GAAKe,EAAOf,GAAK,GAAK,MAwBxC,OACE,eAAC,WAAD,WACA,qBAAKN,UAAWC,IAAQqB,QAAxB,SACE,yBAAQC,QAZiB,WAC3Bb,EAAQc,KAAK,CACXC,SAAUb,EAASa,SACnBT,OAAO,QAAD,OAAUF,EAAqB,OAAS,SAGhDJ,EAAQc,KAAR,UAAgBZ,EAASa,SAAzB,iBAA2CX,EAAqB,OAAS,SAMvE,kBACQA,EAAqB,aAAe,iBAI5C,oBAAId,UAAWC,IAAQyB,KAAvB,SACGR,EAAaS,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAEEtB,GAAIsB,EAAMtB,GACVF,OAAQwB,EAAMxB,OACdD,KAAMyB,EAAMzB,MAHPyB,EAAMtB,a,yCC/BRuB,EAXO,WACpB,OACE,sBAAK7B,UAAWC,IAAQ6B,SAAxB,UACE,iDACA,cAAC,IAAD,CAAMzB,GAAG,aAAaL,UAAU,MAAhC,6BCkDS+B,UApCf,WACE,MAA2DC,YAAQC,KAAc,GAAzEC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAcC,EAAnC,EAA6BC,KAAoBC,EAAjD,EAAiDA,MAMjD,OAJAC,qBAAU,WACRL,MACC,CAACA,IAEW,YAAXC,EAEA,qBAAKnC,UAAU,WAAf,SACE,cAACwC,EAAA,EAAD,MAKFF,EAEA,qBAAKtC,UAAU,mBAAf,SACGsC,IAKQ,cAAXH,GAA4BC,GAAwC,IAAxBA,EAAaK,OAS3D,cAAC,EAAD,CAAWjC,OAAQ4B,IAPjB,qBAAKpC,UAAU,mBAAf,SACE,cAAC,EAAD","file":"static/js/3.5208c742.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__3ZpJv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__1eZmv\",\"sorting\":\"QuoteList_sorting__3Ugdp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__vVzaN\"};","import { Link } from 'react-router-dom';\nimport classes from './QuoteItem.module.css';\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link className='btn' to={`/quotes/${props.id}`}>\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { Fragment } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n  const history = useHistory();\n  const location = useLocation();\n\n  const queryParams = new URLSearchParams(location.search);\n\n  const isSortingAscending = queryParams.get('sort') === 'asc';\n\n  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\n\n  const changeSortingHandler = () => {\n    history.push({\n      pathname: location.pathname,\n      search: `sort=${isSortingAscending ? 'desc' : 'asc'}`\n    }); //method one\n\n    history.push(`${location.pathname}?sort=${(isSortingAscending ? 'desc' : 'asc')}`); //method two\n  }\n\n  return (\n    <Fragment>\n    <div className={classes.sorting}>\n      <button onClick={changeSortingHandler}>\n        Sort {isSortingAscending ? 'Descending' : 'Ascending'}\n      </button>\n    </div>\n\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import classes from './NoQuotesFound.module.css';\nimport { Link } from 'react-router-dom';\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link to='/new-quote' className='btn'>\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import React, { useEffect } from 'react';\r\nimport QuoteList from '../components/quotes/QuoteList';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\nimport useHttp from '../hooks/hooks/use-http';\r\nimport { getAllQuotes } from '../lib/lib/api';\r\nimport NoQuotesFound from '../components/quotes/NoQuotesFound';\r\n\r\n// const DUMMY_QUOTES = [\r\n//   {\r\n//     id: 'q1',\r\n//     author: 'Oscar Wilde',\r\n//     text: 'Be yourself; everyone else is already taken.'\r\n//   },\r\n\r\n//   {\r\n//     id: 'q2',\r\n//     author: 'loco',\r\n//     text: 'I have nothing to declare except my genius'\r\n//   }\r\n// ] --To be used in place of the realtime database\r\n\r\nfunction AllQuotes() {\r\n  const { sendRequest, status, data: loadedQuotes, error } = useHttp(getAllQuotes, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest();  \r\n  }, [sendRequest]);\r\n\r\n  if (status === 'pending') {\r\n    return (\r\n      <div className='centered'>\r\n        <LoadingSpinner />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className='centered focused'>\r\n        {error}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (status === 'completed' && (!loadedQuotes || loadedQuotes.length === 0)) {\r\n    return (\r\n      <div className='centered focused'>\r\n        <NoQuotesFound />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <QuoteList quotes={loadedQuotes} />\r\n  )\r\n}\r\n\r\nexport default AllQuotes;"],"sourceRoot":""}